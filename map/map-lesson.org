* Map Operations
** Outline
*** Lesson Objectives
*** Intro - loop patterns
*** Manual Mapping - Looking At Some Examples
*** Generalizing Code
*** Introducing: =.map=
*** =.map= Mapping - We Do Exercise
** Lesson Objectives
By the end of this session, you should be able to:

- Explain what a map operation is.
- Implement a map operation using JavaScript's built-in =.map= method.
- Implement your own version of =.map= to better understand how it works.

** Introduction: Loop Patterns

We've written a /lot/ of loops in this course so far. You're gaining practice and mastery with them, to the point where you might have started to recognize /patterns/ in all these loops.

Some of the types of loops you've encountered are:

1. Loops that hit every even or odd value, or every 3rd or 4th, skipping over some.
2. Loops that check each value against a condition, acting differently with different kinds of values.
3. Loops that transform each value in the array in some way, like doubling each number, getting the initials of each name, or extracting a property from each object.
4. Loops that look at the value before or after the current one, combining values in myriad ways.
5. Loops that loop through a series of values to give you one value, like an average of numbers, or how often each word appears in a sentence.

In the world of production apps, some of these types of loops appear over and over again. Others don't come up very often at all, but make for good learning exercises.

Today we're going to look at one particular type of loop that you find all the time in real-world apps: the map operation (number 3 in the preceding list).

We'll take a look at the mapping operation by deconstructing and generalizing mapping loops, so we can understand the /how/ and the /why/ of using them.

** Manual Mapping - Looking At Some Examples
*** A simple example
#+begin_src js
const people = ["Colin", "Kerridene", "Tim"];
const attendanceChecks = [];
for (let i = 0; i < people.length; i++) {
  attendanceChecks.push(`Is ${people[i]} here today?`)
}

console.log(attendanceChecks)
#+end_src

#+RESULTS:
: [
:   'Is Colin here today?',
:   'Is Kerridene here today?',
:   'Is Tim here today?'
: ]

*** Let's Do One Together
We'll write a map operation where we grade on a curve.

*Activity*: take the following grades and create a new array where every grade has been increased by 10 points.

#+begin_src js
const grades = [90, 85, 53, 76];
const augmentedGrades = [];
for (let i = 0; i < grades.length; i++) {
  augmentedGrades.push(grades[i] + 10)
}

console.log(augmentedGrades)
#+end_src

#+RESULTS:
: [ 100, 95, 63, 86 ]

*** Breakout room activity

We'll have to do a little more work this time!

*Our task*: take the below grades and build a new array of pass/fail statuses.

The business logic is as follows: if a grade is at least 60, the pass/fail status should be "Pass". Otherwise, it should be "Fail".

#+begin_src js
const grades = [90, 85, 53, 76];

//> ['Pass', 'Pass', 'Fail', 'Pass']
#+end_src



*** Question: what is the pattern here?

What do these map operations share in common?

*** So What Is A Map Operation
Breaking it down, in a map operation, we return a /new/ array where we've transformed the original values into new ones. In these cases, the transformations were:

- From a person's first name to a sentence containing the first name.
- From grades to grades with a bonus.
- From grades to pass/fail statuses.

Doing it in a loop looks like this:

1. Create an empty array.
2. Loop through the old array.
3. Transform the value (in this case, from a simple name string into a sentence)
4. Push that value into the new array.

Mapping operations are /extremely/ common in engineering. Let's look at some examples!

#+ATTR_ORG: :width 1400
[[./twitter-feed.png]]

#+ATTR_ORG: :width 1400
[[./netflix.jpg]]

#+ATTR_ORG: :width 1400
[[./meta.png]]
** Generalizing Code
*** QUESTION: What code is repeated among these examples?

*** QUESTION: Why cut down on repeated code?

We generalize code all the time to avoid repeating things. Any loop is a basic generalization of code:

#+begin_src js
const people = ['Colin', 'Tim', 'Kerridene']
console.log(people[0])
console.log(people[1])
console.log(people[2])
#+end_src

We generalize because we are doing the same thing multiple times, for the reasons we said before, but also because we want to be able to think about /what/ the task is doing, not /how/ it does it.

Loops are all about *how*: what index we're starting at, what index we stop at, whether to use a =for= or a =while=  or a =for of= loop.  Instead, what we want is something /expressive/ that can tell us more cleanly what it is we're actually doing.

** Introducing: =.map=
** =.map= Mapping - We Do Exercise
#+NAME: people-2
#+begin_src js
const people = [
  {
    name: {
      first: 'Kerridene',
      last: 'Waters'
    },

    age: 28,
    isAwesome: true,
    isModest: true,
    hobbies: ['Biking', 'Horticulture', 'Woodworking']
  },
  {
    name: {
      first: 'Colin',
      last: 'Jaffe'
    },

    age: 42,
    isAwesome: true,
    isModest: false,
    hobbies: ['Emacs', 'Board Games', 'Writing']
  },
  {
    name: {
      first: 'Tim',
      last: 'Calhoun'
    },

    age: Infinity,
    isAwesome: true,
    isModest: true,
    hobbies: ['Skiing', 'Hiking', 'Taking Names']
  },
]
#+end_src

#+NAME: bios
#+begin_src js
const bios = []
for (let i = 0; i < people.length; i++) {
  const fullName = people[i].name.first + ' ' + people[i].name.last;
  const hobbies = people[i].hobbies.join(' and ')
  bios.push(`${fullName} is ${people[i].age} years old and loves ${hobbies}.`)
}
#+end_src

#+begin_src js
<<people-2>>
<<bios>>
console.log(bios);
#+end_src

#+RESULTS:
: [
:   'Kerridene Waters is 28 years old and loves Biking and Horticulture and Woodworking.',
:   'Colin Jaffe is 42 years old and loves Emacs and Board Games and Writing.',
:   'Tim Calhoun is Infinity years old and loves Skiing and Hiking and Taking Names.'
: ]

